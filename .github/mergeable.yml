version: 2
mergeable:
  # Let's welcome contributors.
  - when: pull_request.opened
    name: "Hola!"
    validate: []
    filter:
      - do: author
        must_exclude:
          regex: 'dependabot'
    pass:
      - do: comment
        payload:
          body: >
            Thanks for contributing towards Open Social! A maintainer from the @goalgorilla/maintainers group might not review all changes from all teams / contributors. Please don't be discouraged if it takes a while.
            In the meantime, we have some automated checks running and it might be that you will see me comment with some tips or requests to speed up the review process. :blush:
        leave_old_comment: true

  # Check for a valid title.
  - when: pull_request.*
    name: "Valid issue title"
    validate:
      - do: title
        begins_with:
          match: ['Issue #', 'Internal:', 'Updates:', 'Hotfix:']
    fail:
      - do: comment
        payload:
          body: >
            In order for us to match your pull request to the correct open source or internal issue, the title should either:
              - begin with a reference to a Drupal.org issue number in the format of "Issue #issuenumber"
              - begin with Internal: if it's related to an internal ticket
              - begin with Updates: if we are updating one of our dependencies
              - begin with Hotfix: if we are creating a hotfix
      - do: labels
        add: 'blocked: drupal.org ticket'
      - do: checks # default fail case
        status: 'failure' # Can be: success, failure, neutral, cancelled, timed_out, or action_required
    pass:
      - do: labels
        remove: 'blocked: drupal.org ticket'
      - do: checks # default fail case
        status: 'success'

  # Check for meaningful commit messages.
  - when: pull_request.*
    name: "Check commit messages"
    validate:
      - do: commit
        message:
          regex: '^(coding standards|chore|fix|refactor|test|style|perf)(\(\w+\))?:.+$'
          skip_merge: true
    fail:
      - do: comment
        payload:
          body: >
            It would be nice if this was a more "helpful/motivational" message,  maybe linking towards documentation or some inline comment with documentation if that is not too lengthy.
      - do: labels
        add: 'blocked: commit cleanup'
      - do: checks # default fail case
        status: 'failure'
    pass:
      - do: labels
        remove: 'blocked: commit cleanup'
      - do: checks # default fail case
        status: 'success'

  # Let's make sure that the proper labels are added.
  # See: https://mergeable.readthedocs.io/en/latest/validators/label.html
  - when: pull_request.*
    name: "Valid labels"
    validate:
      - do: label
        and:
          - must_include:
              regex: 'team'
              message: 'Please, add "team" label'
          - must_include:
              regex: 'status'
              message: 'Please, add "status" label'
          - must_include:
              regex: 'prio'
              message: 'Please, add "prio" label'
          - must_include:
              regex: 'type'
              message: 'Please, add "type" label'
    pass:
      - do: checks
        status: success
    fail:
      - do: comment
        payload:
          body: >
            The team, status, prio and type labels are very helpful in giving more information about a PR at first glance.
            They are used for providing more information about the PR, for example, the status label shows if the PR is ready for review or not.
            Don't worry if you're unsure what labels to pick, our maintainers will be able to assist you with that.
      - do: checks # default error case
        status: 'failure' # Can be: success, failure, neutral, cancelled, timed_out, or action_required
        payload:
          title: 'Mergeable found some errors!'
          summary: |
            ### Status: {{toUpperCase validationStatus}}
            Some or All of the validators have returned 'error' status, please check below for details
            Here are some stats of the run: \n {{validationCount}} validations were ran.
            {{passCount}} ***PASSED***
            {{failCount}} ***FAILED***
            {{errorCount}} ***ERRORED***
          text: "{{#each validationSuites}}
              #### {{{statusIcon status}}} Validator: {{toUpperCase name}}
              Status {{toUpperCase status}}
              {{#each validations }} * {{{statusIcon status}}} ***{{{ description }}}***
                     Input : {{{details.input}}}
                     Settings : {{{displaySettings details.settings}}}
                     {{#if details.error}}
                     Error : {{{details.error}}}
                     {{/if}}
                     {{/each}}
              {{/each}}"

  # Remove label 'status: needs review' once PR is approved.
  - when: 'pull_request_review.*'
    name: 'Status check'
    filter:
      - do: payload
        review:
          state:
            must_include:
              regex: 'approved'
    validate:
      - do: label
        must_include:
          regex: 'status: needs review'
    pass:
      - do: labels
        delete: 'status: needs review'
      - do: checks
        status: neutral

  # Add label 'status: needs work' if reviewer requested changes.
  - when: 'pull_request_review.*'
    name: 'Status check'
    filter:
      - do: payload
        review:
          state:
            must_include:
              regex: 'changes_requested'
    validate:
      - do: label
        must_include:
          regex: 'status: needs review'
    pass:
      - do: labels
        add: 'status: needs work'
        delete: 'status: needs review'
      - do: comment
        payload:
          body: 'As the reviewer has requested changes, we have added "status: needs work" and have removed "status: needs review" changes.'

  # Let's add "maintainers" team as reviewer once, 'optional: review requested' label is added.
  - when: 'pull_request_review.*'
    name: 'Request mainatainer for review'
    filter:
      - do: payload
        review:
          state:
            must_include:
              regex: 'review_requested'
    validate:
      - do: label
        begins_with:
          match: 'optional: review_requested'
    pass:
      - do: request_review
        teams: ['maintainers']
      - do: comment
        payload:
          body: 'As the @author has requested review from maintainers, we have added @goalgorilla/maintainers reviewers.'

  # Open Social always maintains multiple releases. We want to make sure that a proper milestone is added.
  # This is only ignored if PR is internal.
  - when: pull_request.*
    name: "Valid milestone"
    validate:
      - do: milestone
        no_empty:
          enabled: true
      - do: title
        begins_with:
          match: [ 'Internal:', 'Hotfix:' ]
    pass:
      - do: checks
        status: 'success'
    fail:
      - do: comment
        payload:
          body: >
            A milestone would be super lovely, this way we can map it against a correct release but also be aware
            of where to cherry-pick. Don't worry if you're unsure what milestone to pick, our maintainers will be
            able to assist you with that.
      - do: checks
        status: 'failure'
