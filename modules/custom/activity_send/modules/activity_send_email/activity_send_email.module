<?php

/**
 * @file
 * Contains activity_basics.module..
 */

use Drupal\activity_creator\ActivityInterface;
use Drupal\activity_send_email\Plugin\ActivityDestination\EmailActivityDestination;
use Drupal\Core\Database\Database;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Email frequencies.
 */
const FREQUENCY_DAILY = 'daily';
const FREQUENCY_IMMEDIATELY = 'immediately';
const FREQUENCY_NONE = 'none';
const FREQUENCY_WEEKLY = 'weekly';

/**
 * Implements hook_cron().
 *
 * This cronjob handles creating digest queue items to process.
 */
function activity_send_email_cron() {
  // Get plugins and their intervals.
  $emailfrequencymanager = \Drupal::service('plugin.manager.emailfrequency');
  $plugins = $emailfrequencymanager->getDefinitions();

  // Fill a sortable array with the data about the email frequency.
  foreach ($plugins as $frequency) {
    $instance = $emailfrequencymanager->createInstance($frequency['id']);
    /** @var \Drupal\activity_send_email\EmailFrequencyInterface $instance */
    $interval = $instance->getInterval();

    // If the interval of the EmailFrequency plugin is more than 0, we should
    // consider it to be a digest email.
    if ($interval > 0) {
      // Get last run time.
      $last_run = \Drupal::state()
        ->get('digest.' . $frequency['id'] . '.last_run', 0);

      // If interval of frequency passed since last time, try to create queue
      // items.
      if ((time() - $last_run) > $interval) {
        // Query to get the data to process per user per frequency. And we make
        // sure to check only for items that need to be sent.
        $db = Database::getConnection();
        $query = $db->select('user_activity_digest', 'uad')
          ->fields('uad', ['uid', 'activity'])
          ->condition('uad.frequency', $frequency['id'])
          ->orderBy('uad.timestamp', 'DESC');
        $activitities = $query->execute()->fetchAll();

        if (!empty($activitities)) {
          $queue_items = [];

          // Fill the queue items.
          foreach ($activitities as $activitity) {
            $queue_items[$activitity->uid]['uid'] = $activitity->uid;
            $queue_items[$activitity->uid]['frequency'] = $frequency['id'];
            $queue_items[$activitity->uid]['activities'][] = $activitity->activity;
          }

          // Add queue items to the queue worker.
          foreach ($queue_items as $queue_item) {
            // Add the item to the queue.
            $queue = \Drupal::queue('activity_digest_worker');
            $queue->createItem($queue_item);

            // Remove activities from digest table that we just put it in the
            // queue.
            $db->delete('user_activity_digest')
              ->condition('uid', $queue_item['uid'])
              ->condition('activity', $queue_item['activities'], 'IN')
              ->execute();
          }
        }

        // Update last run.
        \Drupal::state()
          ->set('digest.' . $frequency['id'] . '.last_run', time());
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function activity_send_email_theme() {
  $items = [
    'digestmail' => [
      'template' => 'digestmail',
      'variables' => [
        'notification_count' => NULL,
        'notifications' => NULL,
        'notification_settings' => NULL,
      ],
    ],
    'directmail' => [
      'template' => 'directmail',
      'variables' => [
        'notification' => NULL,
        'notification_settings' => NULL,
      ],
    ],
  ];
  return $items;
}

/**
 * Implements hook_mail().
 */
function activity_send_email_mail($key, &$message, $params) {
  $options = [
    'langcode' => $message['langcode'],
  ];

  $variables = [
    '%site_name' => \Drupal::config('system.site')->get('name'),
  ];

  switch ($key) {
    case 'activity_send_email':
      // Mail subject.
      $message['subject'] = t('Notification from %site_name', $variables, $options);
      // It could be we have a email subject coming from
      // our message.
      if (!empty($params['subject'])) {
        $message['subject'] = $params['subject'];
      }

      // Mail body.
      $message['body'][] = $params['body'];
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function activity_send_email_activity_insert(ActivityInterface $activity) {
  if (!in_array('email', $activity->getDestinations())) {
    return;
  }

  /** @var \Drupal\activity_send\Plugin\ActivitySendManager $activity_send_factory */
  $activity_send_factory = \Drupal::service('plugin.manager.activity_send.processor');

  // Trigger the create action for entities.
  /** @var \Drupal\activity_send_email\Plugin\ActivitySend\EmailActivitySend $create_action */
  $create_action = $activity_send_factory->createInstance('email_activity_send');
  $create_action->process($activity);
}

/**
 * Returns default templates grouped by specific category.
 *
 * @return array[]
 *   Grouped default templates.
 */
function _activity_send_email_default_template_items() {
  return [
    'message_to_me' => [
      'title' => t('Message to me'),
      'templates' => [
        'create_post_profile',
        'create_mention_post',
        'create_mention_comment',
        'create_comment_reply_mention',
        'create_comment_reply',
        'create_comment_post_profile',
        'create_like_node_or_post',
      ],
    ],
    'what_manage' => [
      'title' => t('What I manage'),
      'templates' => [
        'create_comment_author_node_post',
        'join_to_group',
        'request_event_enrollment',
      ],
    ],
    'what_follow' => [
      'title' => t('What I follow'),
      'templates' => [
        'create_comment_following_node',
        'create_content_in_joined_group',
      ],
    ],
    'system_notifications' => [
      'title' => t('System notifications'),
      'templates' => [],
    ],
  ];
}
