<?php

/**
 * @file
 * Contains activity_logger.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\message\MessageTemplateInterface;
use Drupal\Core\Entity\ContentEntityTypeInterface;
use Drupal\hux\Event\FormAlterEvent;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;

/**
 * Implements hook_help().
 */
function activity_logger_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the activity_logger module.
    case 'help.page.activity_logger':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Used to log activities based on the message module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Helper function to get the content entity data.
 *
 * @return array
 *   Entity content data.
 */
function _activity_logger_get_content_entities() {
  $entity_type_manager = \Drupal::service('entity_type.manager');
  $options = [];
  foreach ($entity_type_manager->getDefinitions() as $entity_id => $entity_type) {
    if ($entity_type instanceof ContentEntityTypeInterface
      && $entity_id !== 'activity'
      && $entity_id !== 'message'
      && $entity_id !== 'message_template') {
      $entity_type_bundle_info = \Drupal::service('entity_type.bundle.info');
      $config_entity_bundles = $entity_type_bundle_info->getBundleInfo($entity_type->id());
      foreach ($config_entity_bundles as $key => $value) {
        // Dot character in key names is not allowed in config, so we use "-".
        $options[$entity_id . '-' . $key] = $entity_type->getLabel() . ': ' . $value['label'];
      }
    }
  }
  return $options;
}

/**
 * Entity builder for the message type edit form with third party options.
 *
 * @see activity_logger_form_message_template_form_alter()
 */
function activity_logger_form_message_template_form_builder($entity_type, MessageTemplateInterface $message_template, &$form, FormStateInterface $form_state) {
  $message_template->setThirdPartySetting('activity_logger', 'activity_bundle_entities', $form_state->getValue('activity_bundle_entities'));
  $message_template->setThirdPartySetting('activity_logger', 'activity_action', $form_state->getValue('activity_action'));
  $message_template->setThirdPartySetting('activity_logger', 'activity_context', $form_state->getValue('activity_context'));
  $message_template->setThirdPartySetting('activity_logger', 'activity_destinations', $form_state->getValue('activity_destinations'));
  $message_template->setThirdPartySetting('activity_logger', 'activity_create_direct', $form_state->getValue('activity_create_direct'));
  $message_template->setThirdPartySetting('activity_logger', 'activity_aggregate', $form_state->getValue('activity_aggregate'));
  $message_template->setThirdPartySetting('activity_logger', 'activity_entity_condition', $form_state->getValue('activity_entity_condition'));
  $message_template->setThirdPartySetting('activity_logger', 'email_subject', $form_state->getValue('email_subject'));
}

/**
 * Handles switching the entity condition selector.
 */
function _activity_logger_form_message_template_entity_ajax_callback(&$form, FormStateInterface $form_state) {
  return $form['activity_entity_condition_wrapper'];
}

/**
 * Event subscriber for Activity Logger module.
 */
class ActivityLoggerSubscriber implements EventSubscriberInterface {

  /**
   * Handles form alter events.
   */
  public function onFormAlter(FormAlterEvent $event) {
    $form = &$event->getForm();
    $form_state = $event->getFormState();
    $form_id = $event->getFormId();
    if ($form_id === 'message_template_form') {
      activity_logger_form_message_template_form_alter($form, $form_state);
    }
  }

  /**
   * {@inheritdoc}
   */
  public static function getSubscribedEvents() {
    return [
      FormAlterEvent::ALTER => 'onFormAlter',
    ];
  }

}
